#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PhysPacker –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
"""

import time
from packing_lib.packing_lib.types import PackInput, PackingContainer, PackingInputTask
from packing_lib.packing_lib.packers.PhysPacker import PhysPacker


def create_test_objects(count=8):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏"""
    import random
    random.seed(42)  # –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    objects = []
    for i in range(count):
        width = random.uniform(1.5, 3.5)
        height = random.uniform(1.5, 3.5)
        objects.append(PackInput(id=i, width=width, height=height))
    return objects


def benchmark_mode(name, packer, task):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ä–µ–∂–∏–º –ø–∞–∫–µ—Ä–∞"""
    print(f"\\n=== {name} ===")
    
    start_time = time.time()
    placed_objects = packer.pack(task)
    end_time = time.time()
    
    duration = end_time - start_time
    packed_count = len(placed_objects)
    
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"–£–ø–∞–∫–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {packed_count}")
    print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {packed_count/duration:.1f} –æ–±—ä–µ–∫—Ç–æ–≤/—Å–µ–∫")
    
    return duration, packed_count


def main():
    print("=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PhysPacker ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    objects = create_test_objects(8)
    container = PackingContainer(20, 15)
    task = PackingInputTask(container, objects)
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø–∞–∫–æ–≤–∫—É {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container.width}x{container.height}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    results = []
    
    # 1. Headless —Ä–µ–∂–∏–º (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
    packer1 = PhysPacker(headless=True, pixels_per_mm=20)
    duration1, count1 = benchmark_mode("Headless (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)", packer1, task)
    results.append(("Headless", duration1))
    
    # 2. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    packer2 = PhysPacker(headless=False, pixels_per_mm=20, simulation_speed=1.0, target_fps=60)
    duration2, count2 = benchmark_mode("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1.0x (60 FPS)", packer2, task)
    results.append(("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1x", duration2))
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è
    packer3 = PhysPacker(headless=False, pixels_per_mm=20, simulation_speed=3.0, target_fps=60)
    duration3, count3 = benchmark_mode("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 3.0x (60 FPS)", packer3, task)
    results.append(("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 3x", duration3))
    
    # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, –≤—ã—Å–æ–∫–∏–π FPS
    packer4 = PhysPacker(headless=False, pixels_per_mm=20, simulation_speed=1.0, target_fps=120)
    duration4, count4 = benchmark_mode("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1.0x (120 FPS)", packer4, task)
    results.append(("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 120fps", duration4))
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\\n" + "="*50)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*50)
    
    baseline = results[0][1]  # headless –≤—Ä–µ–º—è –∫–∞–∫ –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è
    
    for name, duration in results:
        speedup = baseline / duration
        print(f"{name:20} | {duration:6.3f}s | –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:4.1f}x")
    
    print("\\nüìù –í—ã–≤–æ–¥—ã:")
    print("- Headless —Ä–µ–∂–∏–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å")
    print("- simulation_speed –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
    print("- –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö")
    print("- –í—Å–µ —Ä–µ–∂–∏–º—ã —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤")


if __name__ == "__main__":
    main()